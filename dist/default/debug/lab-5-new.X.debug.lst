

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Wed Nov 17 11:20:55 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	18F67K40
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	text9,global,reloc=2,class=CODE,delta=1
    19                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    20                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    21                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    22                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    23  0000                     
    24                           ; Version 2.20
    25                           ; Generated 05/05/2020 GMT
    26                           ; 
    27                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    28                           ; All rights reserved.
    29                           ; 
    30                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    31                           ; 
    32                           ; Redistribution and use in source and binary forms, with or without modification, are
    33                           ; permitted provided that the following conditions are met:
    34                           ; 
    35                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    36                           ;        conditions and the following disclaimer.
    37                           ; 
    38                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    39                           ;        of conditions and the following disclaimer in the documentation and/or other
    40                           ;        materials provided with the distribution.
    41                           ; 
    42                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    43                           ;        software without specific prior written permission.
    44                           ; 
    45                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    46                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    47                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    48                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    49                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    50                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    51                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    52                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    53                           ; 
    54                           ; 
    55                           ; Code-generator required, PIC18F67K40 Definitions
    56                           ; 
    57                           ; SFR Addresses
    58  0000                     _ANSELAbits	set	3730
    59  0000                     _PIE4bits	set	3629
    60  0000                     _TX4REG	set	3812
    61  0000                     _RC4REG	set	3811
    62  0000                     _PIR4bits	set	3639
    63  0000                     _RC4STAbits	set	3815
    64  0000                     _SP4BRGH	set	3814
    65  0000                     _SP4BRGL	set	3813
    66  0000                     _TX4STAbits	set	3816
    67  0000                     _BAUD4CONbits	set	3817
    68  0000                     _RX4PPS	set	3605
    69  0000                     _RC0PPS	set	3682
    70  0000                     _ADPCH	set	3935
    71  0000                     _ADREFbits	set	3928
    72  0000                     _ADRESH	set	3940
    73  0000                     _ADCON0bits	set	3936
    74  0000                     _TRISAbits	set	3969
    75  0000                     _TRISEbits	set	3973
    76  0000                     _TRISBbits	set	3970
    77  0000                     _TRISCbits	set	3971
    78  0000                     _LATEbits	set	3965
    79  0000                     _LATBbits	set	3962
    80  0000                     _LATCbits	set	3963
    81                           
    82                           ; #config settings
    83                           
    84                           	psect	cinit
    85  01FE16                     __pcinit:
    86                           	callstack 0
    87  01FE16                     start_initialization:
    88                           	callstack 0
    89  01FE16                     __initialization:
    90                           	callstack 0
    91                           
    92                           ; Clear objects allocated to BANK0 (60 bytes)
    93  01FE16  EE00  F060         	lfsr	0,__pbssBANK0
    94  01FE1A  0E3C               	movlw	60
    95  01FE1C                     clear_0:
    96  01FE1C  6AEE               	clrf	postinc0,c
    97  01FE1E  06E8               	decf	wreg,f,c
    98  01FE20  E1FD               	bnz	clear_0
    99                           
   100                           ; Clear objects allocated to COMRAM (34 bytes)
   101  01FE22  EE00  F001         	lfsr	0,__pbssCOMRAM
   102  01FE26  0E22               	movlw	34
   103  01FE28                     clear_1:
   104  01FE28  6AEE               	clrf	postinc0,c
   105  01FE2A  06E8               	decf	wreg,f,c
   106  01FE2C  E1FD               	bnz	clear_1
   107  01FE2E                     end_of_initialization:
   108                           	callstack 0
   109  01FE2E                     __end_of__initialization:
   110                           	callstack 0
   111  01FE2E  0100               	movlb	0
   112  01FE30  EF32  F0FF         	goto	_main	;jump to C main() function
   113                           
   114                           	psect	bssCOMRAM
   115  000001                     __pbssCOMRAM:
   116                           	callstack 0
   117  000001                     _EUSART4RXbuf:
   118                           	callstack 0
   119  000001                     	ds	20
   120  000015                     _data:
   121                           	callstack 0
   122  000015                     	ds	2
   123  000017                     _frac_part:
   124                           	callstack 0
   125  000017                     	ds	2
   126  000019                     _int_part:
   127                           	callstack 0
   128  000019                     	ds	2
   129  00001B                     _lowbits:
   130                           	callstack 0
   131  00001B                     	ds	2
   132  00001D                     _highbits:
   133                           	callstack 0
   134  00001D                     	ds	2
   135  00001F                     _TxBufReadCnt:
   136                           	callstack 0
   137  00001F                     	ds	1
   138  000020                     _TxBufWriteCnt:
   139                           	callstack 0
   140  000020                     	ds	1
   141  000021                     _RxBufReadCnt:
   142                           	callstack 0
   143  000021                     	ds	1
   144  000022                     _RxBufWriteCnt:
   145                           	callstack 0
   146  000022                     	ds	1
   147                           
   148                           	psect	bssBANK0
   149  000060                     __pbssBANK0:
   150                           	callstack 0
   151  000060                     _EUSART4TXbuf:
   152                           	callstack 0
   153  000060                     	ds	60
   154                           
   155                           	psect	cstackCOMRAM
   156  000023                     __pcstackCOMRAM:
   157                           	callstack 0
   158  000023                     ?_ADC_getval:
   159                           	callstack 0
   160  000023                     LCD_sendnibble@number:
   161                           	callstack 0
   162  000023                     sendCharSerial4@charToSend:
   163                           	callstack 0
   164                           
   165                           ; 1 bytes @ 0x0
   166  000023                     	ds	1
   167  000024                     LCD_sendbyte@type:
   168                           	callstack 0
   169                           
   170                           ; 1 bytes @ 0x1
   171  000024                     	ds	1
   172  000025                     LCD_sendbyte@highbits:
   173                           	callstack 0
   174  000025                     ADC_getval@tmpval:
   175                           	callstack 0
   176                           
   177                           ; 2 bytes @ 0x2
   178  000025                     	ds	1
   179  000026                     LCD_sendbyte@Byte:
   180                           	callstack 0
   181                           
   182                           ; 1 bytes @ 0x3
   183  000026                     	ds	1
   184  000027                     ??_LCD_Init:
   185  000027                     sendStringSerial4@string:
   186                           	callstack 0
   187                           
   188                           ; 2 bytes @ 0x4
   189  000027                     	ds	2
   190  000029                     
   191                           ; 1 bytes @ 0x6
   192 ;;
   193 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   194 ;;
   195 ;; *************** function _main *****************
   196 ;; Defined at:
   197 ;;		line 18 in file "main.c"
   198 ;; Parameters:    Size  Location     Type
   199 ;;		None
   200 ;; Auto vars:     Size  Location     Type
   201 ;;		None
   202 ;; Return value:  Size  Location     Type
   203 ;;                  1    wreg      void 
   204 ;; Registers used:
   205 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   206 ;; Tracked objects:
   207 ;;		On entry : 0/0
   208 ;;		On exit  : 0/0
   209 ;;		Unchanged: 0/0
   210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   211 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   212 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   213 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   214 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   215 ;;Total ram usage:        0 bytes
   216 ;; Hardware stack levels required when called: 4
   217 ;; This function calls:
   218 ;;		_ADC_getval
   219 ;;		_ADC_init
   220 ;;		_LCD_Init
   221 ;;		_initUSART4
   222 ;;		_sendCharSerial4
   223 ;;		_sendStringSerial4
   224 ;; This function is called by:
   225 ;;		Startup code after reset
   226 ;; This function uses a non-reentrant model
   227 ;;
   228                           
   229                           	psect	text0
   230  01FE64                     __ptext0:
   231                           	callstack 0
   232  01FE64                     _main:
   233                           	callstack 27
   234  01FE64                     
   235                           ;main.c: 20:     LCD_Init();
   236  01FE64  ECB4  F0FF         	call	_LCD_Init	;wreg free
   237  01FE68                     
   238                           ;main.c: 21:     initUSART4();
   239  01FE68  ECFC  F0FE         	call	_initUSART4	;wreg free
   240  01FE6C                     
   241                           ;main.c: 22:     ADC_init();
   242  01FE6C  ECEF  F0FE         	call	_ADC_init	;wreg free
   243  01FE70                     l94:
   244                           
   245                           ;main.c: 29:         data = ADC_getval();
   246  01FE70  EC1A  F0FF         	call	_ADC_getval	;wreg free
   247  01FE74  C023  F015         	movff	?_ADC_getval,_data
   248  01FE78  C024  F016         	movff	?_ADC_getval+1,_data+1
   249  01FE7C                     
   250                           ;main.c: 30:         sendStringSerial4(data);
   251  01FE7C  C015  F027         	movff	_data,sendStringSerial4@string
   252  01FE80  C016  F028         	movff	_data+1,sendStringSerial4@string+1
   253  01FE84  EC4B  F0FF         	call	_sendStringSerial4	;wreg free
   254  01FE88                     
   255                           ;main.c: 31:         sendCharSerial4(data);
   256  01FE88  5015               	movf	_data^0,w,c
   257  01FE8A  ECE3  F0FE         	call	_sendCharSerial4
   258  01FE8E  EF38  F0FF         	goto	l94
   259  01FE92  EF00  F000         	goto	start
   260  01FE96                     __end_of_main:
   261                           	callstack 0
   262                           
   263 ;; *************** function _sendStringSerial4 *****************
   264 ;; Defined at:
   265 ;;		line 36 in file "serial.c"
   266 ;; Parameters:    Size  Location     Type
   267 ;;  string          2    4[COMRAM] PTR unsigned char 
   268 ;;		 -> RAM(3561), 
   269 ;; Auto vars:     Size  Location     Type
   270 ;;  i               2    0        unsigned int 
   271 ;; Return value:  Size  Location     Type
   272 ;;                  1    wreg      void 
   273 ;; Registers used:
   274 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
   275 ;; Tracked objects:
   276 ;;		On entry : 0/0
   277 ;;		On exit  : 0/0
   278 ;;		Unchanged: 0/0
   279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   280 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   281 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   282 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   283 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   284 ;;Total ram usage:        2 bytes
   285 ;; Hardware stack levels used: 1
   286 ;; Hardware stack levels required when called: 3
   287 ;; This function calls:
   288 ;;		_LCD_sendbyte
   289 ;; This function is called by:
   290 ;;		_main
   291 ;; This function uses a non-reentrant model
   292 ;;
   293                           
   294                           	psect	text1
   295  01FE96                     __ptext1:
   296                           	callstack 0
   297  01FE96                     _sendStringSerial4:
   298                           	callstack 27
   299  01FE96                     
   300                           ;serial.c: 39:     while(*string != 0){
   301  01FE96  EF58  F0FF         	goto	l1132
   302  01FE9A                     l1128:
   303                           
   304                           ;serial.c: 40:         LCD_sendbyte(*string++, 1);
   305  01FE9A  0E01               	movlw	1
   306  01FE9C  6E24               	movwf	LCD_sendbyte@type^0,c
   307  01FE9E  C027  FFD9         	movff	sendStringSerial4@string,fsr2l
   308  01FEA2  C028  FFDA         	movff	sendStringSerial4@string+1,fsr2h
   309  01FEA6  50DF               	movf	indf2,w,c
   310  01FEA8  EC65  F0FF         	call	_LCD_sendbyte
   311  01FEAC  4A27               	infsnz	sendStringSerial4@string^0,f,c
   312  01FEAE  2A28               	incf	(sendStringSerial4@string+1)^0,f,c
   313  01FEB0                     l1132:
   314                           
   315                           ;serial.c: 39:     while(*string != 0){
   316  01FEB0  C027  FFD9         	movff	sendStringSerial4@string,fsr2l
   317  01FEB4  C028  FFDA         	movff	sendStringSerial4@string+1,fsr2h
   318  01FEB8  50DF               	movf	indf2,w,c
   319  01FEBA  A4D8               	btfss	status,2,c
   320  01FEBC  EF62  F0FF         	goto	u231
   321  01FEC0  EF64  F0FF         	goto	u230
   322  01FEC4                     u231:
   323  01FEC4  EF4D  F0FF         	goto	l1128
   324  01FEC8                     u230:
   325  01FEC8  0012               	return		;funcret
   326  01FECA                     __end_of_sendStringSerial4:
   327                           	callstack 0
   328                           
   329 ;; *************** function _sendCharSerial4 *****************
   330 ;; Defined at:
   331 ;;		line 29 in file "serial.c"
   332 ;; Parameters:    Size  Location     Type
   333 ;;  charToSend      1    wreg     unsigned char 
   334 ;; Auto vars:     Size  Location     Type
   335 ;;  charToSend      1    0[COMRAM] unsigned char 
   336 ;; Return value:  Size  Location     Type
   337 ;;                  1    wreg      void 
   338 ;; Registers used:
   339 ;;		wreg
   340 ;; Tracked objects:
   341 ;;		On entry : 0/0
   342 ;;		On exit  : 0/0
   343 ;;		Unchanged: 0/0
   344 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   345 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   346 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   347 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   348 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   349 ;;Total ram usage:        1 bytes
   350 ;; Hardware stack levels used: 1
   351 ;; This function calls:
   352 ;;		Nothing
   353 ;; This function is called by:
   354 ;;		_main
   355 ;; This function uses a non-reentrant model
   356 ;;
   357                           
   358                           	psect	text2
   359  01FDC6                     __ptext2:
   360                           	callstack 0
   361  01FDC6                     _sendCharSerial4:
   362                           	callstack 30
   363                           
   364                           ;incstack = 0
   365                           ;sendCharSerial4@charToSend stored from wreg
   366  01FDC6  6E23               	movwf	sendCharSerial4@charToSend^0,c
   367  01FDC8                     l145:
   368  01FDC8  010E               	movlb	14	; () banked
   369  01FDCA  A537               	btfss	55,2,b	;volatile
   370  01FDCC  EFEA  F0FE         	goto	u81
   371  01FDD0  EFEC  F0FE         	goto	u80
   372  01FDD4                     u81:
   373  01FDD4  EFE4  F0FE         	goto	l145
   374  01FDD8                     u80:
   375  01FDD8                     
   376                           ; BSR set to: 14
   377                           ;serial.c: 31:     TX4REG = charToSend;
   378  01FDD8  C023  FEE4         	movff	sendCharSerial4@charToSend,3812	;volatile
   379  01FDDC                     
   380                           ; BSR set to: 14
   381  01FDDC  0012               	return		;funcret
   382  01FDDE                     __end_of_sendCharSerial4:
   383                           	callstack 0
   384                           
   385 ;; *************** function _initUSART4 *****************
   386 ;; Defined at:
   387 ;;		line 5 in file "serial.c"
   388 ;; Parameters:    Size  Location     Type
   389 ;;		None
   390 ;; Auto vars:     Size  Location     Type
   391 ;;		None
   392 ;; Return value:  Size  Location     Type
   393 ;;                  1    wreg      void 
   394 ;; Registers used:
   395 ;;		wreg, status,2
   396 ;; Tracked objects:
   397 ;;		On entry : 0/0
   398 ;;		On exit  : 0/0
   399 ;;		Unchanged: 0/0
   400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   401 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   402 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   403 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   404 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   405 ;;Total ram usage:        0 bytes
   406 ;; Hardware stack levels used: 1
   407 ;; This function calls:
   408 ;;		Nothing
   409 ;; This function is called by:
   410 ;;		_main
   411 ;; This function uses a non-reentrant model
   412 ;;
   413                           
   414                           	psect	text3
   415  01FDF8                     __ptext3:
   416                           	callstack 0
   417  01FDF8                     _initUSART4:
   418                           	callstack 30
   419  01FDF8                     
   420                           ;serial.c: 9:     RC0PPS = 0x12;
   421  01FDF8  0E12               	movlw	18
   422  01FDFA  010E               	movlb	14	; () banked
   423  01FDFC  6F62               	movwf	98,b	;volatile
   424                           
   425                           ;serial.c: 10:     RX4PPS = 0x11;
   426  01FDFE  0E11               	movlw	17
   427  01FE00  6F15               	movwf	21,b	;volatile
   428  01FE02                     
   429                           ; BSR set to: 14
   430                           ;serial.c: 12:     BAUD4CONbits.BRG16 = 0;
   431  01FE02  97E9               	bcf	233,3,b	;volatile
   432  01FE04                     
   433                           ; BSR set to: 14
   434                           ;serial.c: 13:     TX4STAbits.BRGH = 0;
   435  01FE04  95E8               	bcf	232,2,b	;volatile
   436                           
   437                           ;serial.c: 14:     SP4BRGL = 51;
   438  01FE06  0E33               	movlw	51
   439  01FE08  6FE5               	movwf	229,b	;volatile
   440                           
   441                           ;serial.c: 15:     SP4BRGH = 0;
   442  01FE0A  0E00               	movlw	0
   443  01FE0C  6FE6               	movwf	230,b	;volatile
   444  01FE0E                     
   445                           ; BSR set to: 14
   446                           ;serial.c: 17:     RC4STAbits.CREN = 1;
   447  01FE0E  89E7               	bsf	231,4,b	;volatile
   448  01FE10                     
   449                           ; BSR set to: 14
   450                           ;serial.c: 18:     TX4STAbits.TXEN = 1;
   451  01FE10  8BE8               	bsf	232,5,b	;volatile
   452  01FE12                     
   453                           ; BSR set to: 14
   454                           ;serial.c: 19:     RC4STAbits.SPEN = 1;
   455  01FE12  8FE7               	bsf	231,7,b	;volatile
   456  01FE14                     
   457                           ; BSR set to: 14
   458  01FE14  0012               	return		;funcret
   459  01FE16                     __end_of_initUSART4:
   460                           	callstack 0
   461                           
   462 ;; *************** function _LCD_Init *****************
   463 ;; Defined at:
   464 ;;		line 73 in file "LCD.c"
   465 ;; Parameters:    Size  Location     Type
   466 ;;		None
   467 ;; Auto vars:     Size  Location     Type
   468 ;;		None
   469 ;; Return value:  Size  Location     Type
   470 ;;                  1    wreg      void 
   471 ;; Registers used:
   472 ;;		wreg, status,2, status,0, cstack
   473 ;; Tracked objects:
   474 ;;		On entry : 0/0
   475 ;;		On exit  : 0/0
   476 ;;		Unchanged: 0/0
   477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   478 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   479 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   480 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   481 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   482 ;;Total ram usage:        2 bytes
   483 ;; Hardware stack levels used: 1
   484 ;; Hardware stack levels required when called: 3
   485 ;; This function calls:
   486 ;;		_LCD_sendbyte
   487 ;;		_LCD_sendnibble
   488 ;; This function is called by:
   489 ;;		_main
   490 ;; This function uses a non-reentrant model
   491 ;;
   492                           
   493                           	psect	text4
   494  01FF68                     __ptext4:
   495                           	callstack 0
   496  01FF68                     _LCD_Init:
   497                           	callstack 27
   498  01FF68                     
   499                           ;LCD.c: 80:     TRISCbits.TRISC6 = 0;
   500  01FF68  9C83               	bcf	131,6,c	;volatile
   501                           
   502                           ;LCD.c: 81:     TRISCbits.TRISC2 = 0;
   503  01FF6A  9483               	bcf	131,2,c	;volatile
   504                           
   505                           ;LCD.c: 82:     TRISBbits.TRISB3 = 0;
   506  01FF6C  9682               	bcf	130,3,c	;volatile
   507                           
   508                           ;LCD.c: 83:     TRISBbits.TRISB2 = 0;
   509  01FF6E  9482               	bcf	130,2,c	;volatile
   510                           
   511                           ;LCD.c: 84:     TRISEbits.TRISE3 = 0;
   512  01FF70  9685               	bcf	133,3,c	;volatile
   513                           
   514                           ;LCD.c: 85:     TRISEbits.TRISE1 = 0;
   515  01FF72  9285               	bcf	133,1,c	;volatile
   516                           
   517                           ;LCD.c: 88:     LATCbits.LATC6 = 0;
   518  01FF74  9C7B               	bcf	123,6,c	;volatile
   519                           
   520                           ;LCD.c: 89:     LATCbits.LATC2 = 0;
   521  01FF76  947B               	bcf	123,2,c	;volatile
   522                           
   523                           ;LCD.c: 90:     LATBbits.LATB3 = 0;
   524  01FF78  967A               	bcf	122,3,c	;volatile
   525                           
   526                           ;LCD.c: 91:     LATBbits.LATB2 = 0;
   527  01FF7A  947A               	bcf	122,2,c	;volatile
   528                           
   529                           ;LCD.c: 92:     LATEbits.LATE3 = 0;
   530  01FF7C  967D               	bcf	125,3,c	;volatile
   531                           
   532                           ;LCD.c: 93:     LATEbits.LATE1 = 0;
   533  01FF7E  927D               	bcf	125,1,c	;volatile
   534  01FF80                     
   535                           ;LCD.c: 102:     _delay((unsigned long)((41)*(64000000/4000.0)));
   536  01FF80  0E04               	movlw	4
   537  01FF82  6E28               	movwf	(??_LCD_Init+1)^0,c
   538  01FF84  0E54               	movlw	84
   539  01FF86  6E27               	movwf	??_LCD_Init^0,c
   540  01FF88  0EEE               	movlw	238
   541  01FF8A                     u307:
   542  01FF8A  2EE8               	decfsz	wreg,f,c
   543  01FF8C  D7FE               	bra	u307
   544  01FF8E  2E27               	decfsz	??_LCD_Init^0,f,c
   545  01FF90  D7FC               	bra	u307
   546  01FF92  2E28               	decfsz	(??_LCD_Init+1)^0,f,c
   547  01FF94  D7FA               	bra	u307
   548  01FF96  D000               	nop2	
   549  01FF98                     
   550                           ;LCD.c: 104:     LCD_sendnibble(0b0011);
   551  01FF98  0E03               	movlw	3
   552  01FF9A  EC80  F0FF         	call	_LCD_sendnibble
   553  01FF9E                     
   554                           ;LCD.c: 105:     _delay((unsigned long)((40)*(64000000/4000000.0)));
   555  01FF9E  0ED5               	movlw	213
   556  01FFA0                     u317:
   557  01FFA0  2EE8               	decfsz	wreg,f,c
   558  01FFA2  D7FE               	bra	u317
   559  01FFA4  F000               	nop	
   560  01FFA6                     
   561                           ;LCD.c: 106:     LCD_sendbyte(0b00101000,0);
   562  01FFA6  0E00               	movlw	0
   563  01FFA8  6E24               	movwf	LCD_sendbyte@type^0,c
   564  01FFAA  0E28               	movlw	40
   565  01FFAC  EC65  F0FF         	call	_LCD_sendbyte
   566  01FFB0                     
   567                           ;LCD.c: 107:     _delay((unsigned long)((40)*(64000000/4000000.0)));
   568  01FFB0  0ED5               	movlw	213
   569  01FFB2                     u327:
   570  01FFB2  2EE8               	decfsz	wreg,f,c
   571  01FFB4  D7FE               	bra	u327
   572  01FFB6  F000               	nop	
   573  01FFB8                     
   574                           ;LCD.c: 108:     LCD_sendbyte(0b00101000,0);
   575  01FFB8  0E00               	movlw	0
   576  01FFBA  6E24               	movwf	LCD_sendbyte@type^0,c
   577  01FFBC  0E28               	movlw	40
   578  01FFBE  EC65  F0FF         	call	_LCD_sendbyte
   579  01FFC2                     
   580                           ;LCD.c: 109:     _delay((unsigned long)((38)*(64000000/4000000.0)));
   581  01FFC2  0ECA               	movlw	202
   582  01FFC4                     u337:
   583  01FFC4  2EE8               	decfsz	wreg,f,c
   584  01FFC6  D7FE               	bra	u337
   585  01FFC8  D000               	nop2	
   586  01FFCA                     
   587                           ;LCD.c: 110:     LCD_sendbyte(0b00001110,0);
   588  01FFCA  0E00               	movlw	0
   589  01FFCC  6E24               	movwf	LCD_sendbyte@type^0,c
   590  01FFCE  0E0E               	movlw	14
   591  01FFD0  EC65  F0FF         	call	_LCD_sendbyte
   592  01FFD4                     
   593                           ;LCD.c: 111:     _delay((unsigned long)((38)*(64000000/4000000.0)));
   594  01FFD4  0ECA               	movlw	202
   595  01FFD6                     u347:
   596  01FFD6  2EE8               	decfsz	wreg,f,c
   597  01FFD8  D7FE               	bra	u347
   598  01FFDA  D000               	nop2	
   599  01FFDC                     
   600                           ;LCD.c: 112:     LCD_sendbyte(0b00000001,0);
   601  01FFDC  0E00               	movlw	0
   602  01FFDE  6E24               	movwf	LCD_sendbyte@type^0,c
   603  01FFE0  0E01               	movlw	1
   604  01FFE2  EC65  F0FF         	call	_LCD_sendbyte
   605  01FFE6                     
   606                           ;LCD.c: 113:     _delay((unsigned long)((1.55)*(64000000/4000.0)));
   607  01FFE6  0E21               	movlw	33
   608  01FFE8  6E27               	movwf	??_LCD_Init^0,c
   609  01FFEA  0E34               	movlw	52
   610  01FFEC                     u357:
   611  01FFEC  2EE8               	decfsz	wreg,f,c
   612  01FFEE  D7FE               	bra	u357
   613  01FFF0  2E27               	decfsz	??_LCD_Init^0,f,c
   614  01FFF2  D7FC               	bra	u357
   615  01FFF4                     
   616                           ;LCD.c: 114:     LCD_sendbyte(0b00000110,0);
   617  01FFF4  0E00               	movlw	0
   618  01FFF6  6E24               	movwf	LCD_sendbyte@type^0,c
   619  01FFF8  0E06               	movlw	6
   620  01FFFA  EC65  F0FF         	call	_LCD_sendbyte
   621  01FFFE  0012               	return		;funcret
   622  020000                     __end_of_LCD_Init:
   623                           	callstack 0
   624                           
   625 ;; *************** function _LCD_sendbyte *****************
   626 ;; Defined at:
   627 ;;		line 52 in file "LCD.c"
   628 ;; Parameters:    Size  Location     Type
   629 ;;  Byte            1    wreg     unsigned char 
   630 ;;  type            1    1[COMRAM] unsigned char 
   631 ;; Auto vars:     Size  Location     Type
   632 ;;  Byte            1    3[COMRAM] unsigned char 
   633 ;;  highbits        1    2[COMRAM] unsigned char 
   634 ;; Return value:  Size  Location     Type
   635 ;;                  1    wreg      void 
   636 ;; Registers used:
   637 ;;		wreg, status,2, status,0, cstack
   638 ;; Tracked objects:
   639 ;;		On entry : 0/0
   640 ;;		On exit  : 0/0
   641 ;;		Unchanged: 0/0
   642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   643 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   644 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   645 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   646 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   647 ;;Total ram usage:        3 bytes
   648 ;; Hardware stack levels used: 1
   649 ;; Hardware stack levels required when called: 2
   650 ;; This function calls:
   651 ;;		_LCD_sendnibble
   652 ;; This function is called by:
   653 ;;		_LCD_Init
   654 ;;		_sendStringSerial4
   655 ;;		_LCD_setline
   656 ;;		_LCD_sendstring
   657 ;;		_LCD_scroll
   658 ;; This function uses a non-reentrant model
   659 ;;
   660                           
   661                           	psect	text5
   662  01FECA                     __ptext5:
   663                           	callstack 0
   664  01FECA                     _LCD_sendbyte:
   665                           	callstack 27
   666                           
   667                           ;incstack = 0
   668                           ;LCD_sendbyte@Byte stored from wreg
   669  01FECA  6E26               	movwf	LCD_sendbyte@Byte^0,c
   670  01FECC                     
   671                           ;LCD.c: 52: void LCD_sendbyte(unsigned char Byte, char type);LCD.c: 53: {;LCD.c: 56:    
      +                           unsigned char highbits;;LCD.c: 58:     highbits = Byte >> 4;
   672  01FECC  3826               	swapf	LCD_sendbyte@Byte^0,w,c
   673  01FECE  0B0F               	andlw	15
   674  01FED0  6E25               	movwf	LCD_sendbyte@highbits^0,c
   675                           
   676                           ;LCD.c: 61:     if (type == 1) {LATCbits.LATC6 = 1;} else {LATCbits.LATC6 = 0;}
   677  01FED2  0424               	decf	LCD_sendbyte@type^0,w,c
   678  01FED4  A4D8               	btfss	status,2,c
   679  01FED6  EF6F  F0FF         	goto	u211
   680  01FEDA  EF71  F0FF         	goto	u210
   681  01FEDE                     u211:
   682  01FEDE  EF74  F0FF         	goto	l41
   683  01FEE2                     u210:
   684  01FEE2  8C7B               	bsf	123,6,c	;volatile
   685  01FEE4  EF75  F0FF         	goto	l1088
   686  01FEE8                     l41:
   687  01FEE8  9C7B               	bcf	123,6,c	;volatile
   688  01FEEA                     l1088:
   689                           
   690                           ;LCD.c: 64:     LCD_sendnibble(highbits);
   691  01FEEA  5025               	movf	LCD_sendbyte@highbits^0,w,c
   692  01FEEC  EC80  F0FF         	call	_LCD_sendnibble
   693                           
   694                           ;LCD.c: 65:     LCD_sendnibble(Byte);
   695  01FEF0  5026               	movf	LCD_sendbyte@Byte^0,w,c
   696  01FEF2  EC80  F0FF         	call	_LCD_sendnibble
   697  01FEF6                     
   698                           ;LCD.c: 67:     _delay((unsigned long)((50)*(64000000/4000000.0)));
   699  01FEF6  0EA0               	movlw	160
   700  01FEF8                     u367:
   701  01FEF8  D000               	nop2	
   702  01FEFA  2EE8               	decfsz	wreg,f,c
   703  01FEFC  D7FD               	bra	u367
   704  01FEFE  0012               	return		;funcret
   705  01FF00                     __end_of_LCD_sendbyte:
   706                           	callstack 0
   707                           
   708 ;; *************** function _LCD_sendnibble *****************
   709 ;; Defined at:
   710 ;;		line 34 in file "LCD.c"
   711 ;; Parameters:    Size  Location     Type
   712 ;;  number          1    wreg     unsigned char 
   713 ;; Auto vars:     Size  Location     Type
   714 ;;  number          1    0[COMRAM] unsigned char 
   715 ;; Return value:  Size  Location     Type
   716 ;;                  1    wreg      void 
   717 ;; Registers used:
   718 ;;		wreg, cstack
   719 ;; Tracked objects:
   720 ;;		On entry : 0/0
   721 ;;		On exit  : 0/0
   722 ;;		Unchanged: 0/0
   723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   724 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   725 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   726 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   727 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   728 ;;Total ram usage:        1 bytes
   729 ;; Hardware stack levels used: 1
   730 ;; Hardware stack levels required when called: 1
   731 ;; This function calls:
   732 ;;		_LCD_E_TOG
   733 ;; This function is called by:
   734 ;;		_LCD_sendbyte
   735 ;;		_LCD_Init
   736 ;; This function uses a non-reentrant model
   737 ;;
   738                           
   739                           	psect	text6
   740  01FF00                     __ptext6:
   741                           	callstack 0
   742  01FF00                     _LCD_sendnibble:
   743                           	callstack 27
   744                           
   745                           ;incstack = 0
   746                           ;LCD_sendnibble@number stored from wreg
   747  01FF00  6E23               	movwf	LCD_sendnibble@number^0,c
   748  01FF02                     
   749                           ;LCD.c: 34: void LCD_sendnibble(unsigned char number);LCD.c: 35: {;LCD.c: 38:     if (nu
      +                          mber & 0b0001) {LATBbits.LATB3 = 1;} else {LATBbits.LATB3 = 0;}
   750  01FF02  A023               	btfss	LCD_sendnibble@number^0,0,c
   751  01FF04  EF86  F0FF         	goto	u11
   752  01FF08  EF88  F0FF         	goto	u10
   753  01FF0C                     u11:
   754  01FF0C  EF8B  F0FF         	goto	l30
   755  01FF10                     u10:
   756  01FF10  867A               	bsf	122,3,c	;volatile
   757  01FF12  EF8C  F0FF         	goto	l890
   758  01FF16                     l30:
   759  01FF16  967A               	bcf	122,3,c	;volatile
   760  01FF18                     l890:
   761                           
   762                           ;LCD.c: 39:     if (number & 0b0010) {LATBbits.LATB2 = 1;} else {LATBbits.LATB2 = 0;}
   763  01FF18  A223               	btfss	LCD_sendnibble@number^0,1,c
   764  01FF1A  EF91  F0FF         	goto	u21
   765  01FF1E  EF93  F0FF         	goto	u20
   766  01FF22                     u21:
   767  01FF22  EF96  F0FF         	goto	l32
   768  01FF26                     u20:
   769  01FF26  847A               	bsf	122,2,c	;volatile
   770  01FF28  EF97  F0FF         	goto	l894
   771  01FF2C                     l32:
   772  01FF2C  947A               	bcf	122,2,c	;volatile
   773  01FF2E                     l894:
   774                           
   775                           ;LCD.c: 40:     if (number & 0b0100) {LATEbits.LATE3 = 1;} else {LATEbits.LATE3 = 0;}
   776  01FF2E  A423               	btfss	LCD_sendnibble@number^0,2,c
   777  01FF30  EF9C  F0FF         	goto	u31
   778  01FF34  EF9E  F0FF         	goto	u30
   779  01FF38                     u31:
   780  01FF38  EFA1  F0FF         	goto	l34
   781  01FF3C                     u30:
   782  01FF3C  867D               	bsf	125,3,c	;volatile
   783  01FF3E  EFA2  F0FF         	goto	l898
   784  01FF42                     l34:
   785  01FF42  967D               	bcf	125,3,c	;volatile
   786  01FF44                     l898:
   787                           
   788                           ;LCD.c: 41:     if (number & 0b1000) {LATEbits.LATE1 = 1;} else {LATEbits.LATE1 = 0;}
   789  01FF44  A623               	btfss	LCD_sendnibble@number^0,3,c
   790  01FF46  EFA7  F0FF         	goto	u41
   791  01FF4A  EFA9  F0FF         	goto	u40
   792  01FF4E                     u41:
   793  01FF4E  EFAC  F0FF         	goto	l36
   794  01FF52                     u40:
   795  01FF52  827D               	bsf	125,1,c	;volatile
   796  01FF54  EFAD  F0FF         	goto	l902
   797  01FF58                     l36:
   798  01FF58  927D               	bcf	125,1,c	;volatile
   799  01FF5A                     l902:
   800                           
   801                           ;LCD.c: 43:     LCD_E_TOG();
   802  01FF5A  ECDC  F0FE         	call	_LCD_E_TOG	;wreg free
   803  01FF5E                     
   804                           ;LCD.c: 44:     _delay((unsigned long)((5)*(64000000/4000000.0)));
   805  01FF5E  0E1A               	movlw	26
   806  01FF60                     u377:
   807  01FF60  2EE8               	decfsz	wreg,f,c
   808  01FF62  D7FE               	bra	u377
   809  01FF64  D000               	nop2	
   810  01FF66  0012               	return		;funcret
   811  01FF68                     __end_of_LCD_sendnibble:
   812                           	callstack 0
   813                           
   814 ;; *************** function _LCD_E_TOG *****************
   815 ;; Defined at:
   816 ;;		line 21 in file "LCD.c"
   817 ;; Parameters:    Size  Location     Type
   818 ;;		None
   819 ;; Auto vars:     Size  Location     Type
   820 ;;		None
   821 ;; Return value:  Size  Location     Type
   822 ;;                  1    wreg      void 
   823 ;; Registers used:
   824 ;;		wreg
   825 ;; Tracked objects:
   826 ;;		On entry : 0/0
   827 ;;		On exit  : 0/0
   828 ;;		Unchanged: 0/0
   829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   830 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   831 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   832 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   833 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   834 ;;Total ram usage:        0 bytes
   835 ;; Hardware stack levels used: 1
   836 ;; This function calls:
   837 ;;		Nothing
   838 ;; This function is called by:
   839 ;;		_LCD_sendnibble
   840 ;; This function uses a non-reentrant model
   841 ;;
   842                           
   843                           	psect	text7
   844  01FDB8                     __ptext7:
   845                           	callstack 0
   846  01FDB8                     _LCD_E_TOG:
   847                           	callstack 27
   848  01FDB8                     
   849                           ;LCD.c: 25:     LATCbits.LATC2 = 1;
   850  01FDB8  847B               	bsf	123,2,c	;volatile
   851  01FDBA                     
   852                           ;LCD.c: 26:  _delay((unsigned long)((2)*(64000000/4000000.0)));
   853  01FDBA  0E0A               	movlw	10
   854  01FDBC                     u387:
   855  01FDBC  2EE8               	decfsz	wreg,f,c
   856  01FDBE  D7FE               	bra	u387
   857  01FDC0  D000               	nop2	
   858  01FDC2                     
   859                           ;LCD.c: 28:     LATCbits.LATC2 = 0;
   860  01FDC2  947B               	bcf	123,2,c	;volatile
   861  01FDC4  0012               	return		;funcret
   862  01FDC6                     __end_of_LCD_E_TOG:
   863                           	callstack 0
   864                           
   865 ;; *************** function _ADC_init *****************
   866 ;; Defined at:
   867 ;;		line 9 in file "ADC.c"
   868 ;; Parameters:    Size  Location     Type
   869 ;;		None
   870 ;; Auto vars:     Size  Location     Type
   871 ;;		None
   872 ;; Return value:  Size  Location     Type
   873 ;;                  1    wreg      void 
   874 ;; Registers used:
   875 ;;		wreg, status,2
   876 ;; Tracked objects:
   877 ;;		On entry : 0/0
   878 ;;		On exit  : 0/0
   879 ;;		Unchanged: 0/0
   880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   882 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   883 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   884 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   885 ;;Total ram usage:        0 bytes
   886 ;; Hardware stack levels used: 1
   887 ;; This function calls:
   888 ;;		Nothing
   889 ;; This function is called by:
   890 ;;		_main
   891 ;; This function uses a non-reentrant model
   892 ;;
   893                           
   894                           	psect	text8
   895  01FDDE                     __ptext8:
   896                           	callstack 0
   897  01FDDE                     _ADC_init:
   898                           	callstack 30
   899  01FDDE                     
   900                           ;ADC.c: 11:     TRISAbits.TRISA3=1;
   901  01FDDE  8681               	bsf	129,3,c	;volatile
   902                           
   903                           ;ADC.c: 12:     ANSELAbits.ANSELA3=1;
   904  01FDE0  010E               	movlb	14	; () banked
   905  01FDE2  8792               	bsf	146,3,b	;volatile
   906                           
   907                           ;ADC.c: 15:     ADREFbits.ADNREF = 0;
   908  01FDE4  010F               	movlb	15	; () banked
   909  01FDE6  9958               	bcf	88,4,b	;volatile
   910  01FDE8                     
   911                           ; BSR set to: 15
   912                           ;ADC.c: 16:     ADREFbits.ADPREF = 0b00;
   913  01FDE8  0EFC               	movlw	-4
   914  01FDEA  1758               	andwf	88,f,b	;volatile
   915                           
   916                           ;ADC.c: 17:     ADPCH=0b11;
   917  01FDEC  0E03               	movlw	3
   918  01FDEE  6F5F               	movwf	95,b	;volatile
   919  01FDF0                     
   920                           ; BSR set to: 15
   921                           ;ADC.c: 18:     ADCON0bits.ADFM = 0;
   922  01FDF0  9460               	bcf	96,2,c	;volatile
   923  01FDF2                     
   924                           ; BSR set to: 15
   925                           ;ADC.c: 19:     ADCON0bits.ADCS = 1;
   926  01FDF2  8860               	bsf	96,4,c	;volatile
   927  01FDF4                     
   928                           ; BSR set to: 15
   929                           ;ADC.c: 20:     ADCON0bits.ADON = 1;
   930  01FDF4  8E60               	bsf	96,7,c	;volatile
   931  01FDF6                     
   932                           ; BSR set to: 15
   933  01FDF6  0012               	return		;funcret
   934  01FDF8                     __end_of_ADC_init:
   935                           	callstack 0
   936                           
   937 ;; *************** function _ADC_getval *****************
   938 ;; Defined at:
   939 ;;		line 23 in file "ADC.c"
   940 ;; Parameters:    Size  Location     Type
   941 ;;		None
   942 ;; Auto vars:     Size  Location     Type
   943 ;;  tmpval          2    2[COMRAM] unsigned int 
   944 ;; Return value:  Size  Location     Type
   945 ;;                  2    0[COMRAM] unsigned int 
   946 ;; Registers used:
   947 ;;		wreg, status,2, status,0
   948 ;; Tracked objects:
   949 ;;		On entry : 0/0
   950 ;;		On exit  : 0/0
   951 ;;		Unchanged: 0/0
   952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13
   953 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   954 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   956 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0
   957 ;;Total ram usage:        4 bytes
   958 ;; Hardware stack levels used: 1
   959 ;; This function calls:
   960 ;;		Nothing
   961 ;; This function is called by:
   962 ;;		_main
   963 ;; This function uses a non-reentrant model
   964 ;;
   965                           
   966                           	psect	text9
   967  01FE34                     __ptext9:
   968                           	callstack 0
   969  01FE34                     _ADC_getval:
   970                           	callstack 30
   971  01FE34                     
   972                           ;ADC.c: 25:     unsigned int tmpval;;ADC.c: 27:     ADCON0bits.GO = 1;
   973  01FE34  8060               	bsf	96,0,c	;volatile
   974  01FE36                     l201:
   975  01FE36  B060               	btfsc	96,0,c	;volatile
   976  01FE38  EF20  F0FF         	goto	u221
   977  01FE3C  EF22  F0FF         	goto	u220
   978  01FE40                     u221:
   979  01FE40  EF1B  F0FF         	goto	l201
   980  01FE44                     u220:
   981  01FE44                     
   982                           ;ADC.c: 31:     tmpval = ADRESH;
   983  01FE44  CF64 F025          	movff	3940,ADC_getval@tmpval	;volatile
   984  01FE48  6A26               	clrf	(ADC_getval@tmpval+1)^0,c
   985  01FE4A                     
   986                           ;ADC.c: 35:     tmpval = 255 - tmpval;
   987  01FE4A  5025               	movf	ADC_getval@tmpval^0,w,c
   988  01FE4C  08FF               	sublw	255
   989  01FE4E  6E25               	movwf	ADC_getval@tmpval^0,c
   990  01FE50  5026               	movf	(ADC_getval@tmpval+1)^0,w,c
   991  01FE52  A0D8               	btfss	status,0,c
   992  01FE54  2AE8               	incf	wreg,f,c
   993  01FE56  0800               	sublw	0
   994  01FE58  6E26               	movwf	(ADC_getval@tmpval+1)^0,c
   995  01FE5A                     
   996                           ;ADC.c: 37:     return tmpval;
   997  01FE5A  C025  F023         	movff	ADC_getval@tmpval,?_ADC_getval
   998  01FE5E  C026  F024         	movff	ADC_getval@tmpval+1,?_ADC_getval+1
   999  01FE62  0012               	return		;funcret
  1000  01FE64                     __end_of_ADC_getval:
  1001                           	callstack 0
  1002  0000                     
  1003                           	psect	rparam
  1004  0000                     
  1005                           	psect	idloc
  1006                           
  1007                           ;Config register IDLOC0 @ 0x200000
  1008                           ;	unspecified, using default values
  1009  200000                     	org	2097152
  1010  200000  0FFF               	dw	4095
  1011                           
  1012                           ;Config register IDLOC1 @ 0x200002
  1013                           ;	unspecified, using default values
  1014  200002                     	org	2097154
  1015  200002  0FFF               	dw	4095
  1016                           
  1017                           ;Config register IDLOC2 @ 0x200004
  1018                           ;	unspecified, using default values
  1019  200004                     	org	2097156
  1020  200004  0FFF               	dw	4095
  1021                           
  1022                           ;Config register IDLOC3 @ 0x200006
  1023                           ;	unspecified, using default values
  1024  200006                     	org	2097158
  1025  200006  0FFF               	dw	4095
  1026                           
  1027                           ;Config register IDLOC4 @ 0x200008
  1028                           ;	unspecified, using default values
  1029  200008                     	org	2097160
  1030  200008  0FFF               	dw	4095
  1031                           
  1032                           ;Config register IDLOC5 @ 0x20000A
  1033                           ;	unspecified, using default values
  1034  20000A                     	org	2097162
  1035  20000A  0FFF               	dw	4095
  1036                           
  1037                           ;Config register IDLOC6 @ 0x20000C
  1038                           ;	unspecified, using default values
  1039  20000C                     	org	2097164
  1040  20000C  0FFF               	dw	4095
  1041                           
  1042                           ;Config register IDLOC7 @ 0x20000E
  1043                           ;	unspecified, using default values
  1044  20000E                     	org	2097166
  1045  20000E  0FFF               	dw	4095
  1046                           
  1047                           	psect	config
  1048                           
  1049                           ;Config register CONFIG1L @ 0x300000
  1050                           ;	External Oscillator mode Selection bits
  1051                           ;	FEXTOSC = HS, HS (crystal oscillator) above 8 MHz; PFM set to high power
  1052                           ;	Power-up default value for COSC bits
  1053                           ;	RSTOSC = EXTOSC_4PLL, EXTOSC with 4x PLL, with EXTOSC operating per FEXTOSC bits
  1054  300000                     	org	3145728
  1055  300000  AA                 	db	170
  1056                           
  1057                           ;Config register CONFIG1H @ 0x300001
  1058                           ;	unspecified, using default values
  1059                           ;	Clock Out Enable bit
  1060                           ;	CLKOUTEN = 0x1, unprogrammed default
  1061                           ;	Clock Switch Enable bit
  1062                           ;	CSWEN = 0x1, unprogrammed default
  1063                           ;	Fail-Safe Clock Monitor Enable bit
  1064                           ;	FCMEN = 0x1, unprogrammed default
  1065  300001                     	org	3145729
  1066  300001  FF                 	db	255
  1067                           
  1068                           ;Config register CONFIG2L @ 0x300002
  1069                           ;	unspecified, using default values
  1070                           ;	Master Clear Enable bit
  1071                           ;	MCLRE = 0x1, unprogrammed default
  1072                           ;	Power-up Timer Enable bit
  1073                           ;	PWRTE = 0x1, unprogrammed default
  1074                           ;	Low-power BOR enable bit
  1075                           ;	LPBOREN = 0x1, unprogrammed default
  1076                           ;	Brown-out Reset Enable bits
  1077                           ;	BOREN = 0x3, unprogrammed default
  1078  300002                     	org	3145730
  1079  300002  FF                 	db	255
  1080                           
  1081                           ;Config register CONFIG2H @ 0x300003
  1082                           ;	unspecified, using default values
  1083                           ;	Brown Out Reset Voltage selection bits
  1084                           ;	BORV = 0x3, unprogrammed default
  1085                           ;	ZCD Disable bit
  1086                           ;	ZCD = 0x1, unprogrammed default
  1087                           ;	PPSLOCK bit One-Way Set Enable bit
  1088                           ;	PPS1WAY = 0x1, unprogrammed default
  1089                           ;	Stack Full/Underflow Reset Enable bit
  1090                           ;	STVREN = 0x1, unprogrammed default
  1091                           ;	Debugger Enable bit
  1092                           ;	DEBUG = 0x1, unprogrammed default
  1093                           ;	Extended Instruction Set Enable bit
  1094                           ;	XINST = 0x1, unprogrammed default
  1095  300003                     	org	3145731
  1096  300003  FF                 	db	255
  1097                           
  1098                           ;Config register CONFIG3L @ 0x300004
  1099                           ;	WDT Period Select bits
  1100                           ;	WDTCPS = 0x1F, unprogrammed default
  1101                           ;	WDT operating mode
  1102                           ;	WDTE = OFF, WDT Disabled
  1103  300004                     	org	3145732
  1104  300004  9F                 	db	159
  1105                           
  1106                           ;Config register CONFIG3H @ 0x300005
  1107                           ;	unspecified, using default values
  1108                           ;	WDT Window Select bits
  1109                           ;	WDTCWS = 0x7, unprogrammed default
  1110                           ;	WDT input clock selector
  1111                           ;	WDTCCS = 0x7, unprogrammed default
  1112  300005                     	org	3145733
  1113  300005  FF                 	db	255
  1114                           
  1115                           ;Config register CONFIG4L @ 0x300006
  1116                           ;	unspecified, using default values
  1117                           ;	Write Protection Block 0
  1118                           ;	WRT0 = 0x1, unprogrammed default
  1119                           ;	Write Protection Block 1
  1120                           ;	WRT1 = 0x1, unprogrammed default
  1121                           ;	Write Protection Block 2
  1122                           ;	WRT2 = 0x1, unprogrammed default
  1123                           ;	Write Protection Block 3
  1124                           ;	WRT3 = 0x1, unprogrammed default
  1125                           ;	Write Protection Block 3
  1126                           ;	WRT4 = 0x1, unprogrammed default
  1127                           ;	Write Protection Block 3
  1128                           ;	WRT5 = 0x1, unprogrammed default
  1129                           ;	Write Protection Block 3
  1130                           ;	WRT6 = 0x1, unprogrammed default
  1131                           ;	Write Protection Block 3
  1132                           ;	WRT7 = 0x1, unprogrammed default
  1133  300006                     	org	3145734
  1134  300006  FF                 	db	255
  1135                           
  1136                           ;Config register CONFIG4H @ 0x300007
  1137                           ;	unspecified, using default values
  1138                           ;	Configuration Register Write Protection bit
  1139                           ;	WRTC = 0x1, unprogrammed default
  1140                           ;	Boot Block Write Protection bit
  1141                           ;	WRTB = 0x1, unprogrammed default
  1142                           ;	Data EEPROM Write Protection bit
  1143                           ;	WRTD = 0x1, unprogrammed default
  1144                           ;	Scanner Enable bit
  1145                           ;	SCANE = 0x1, unprogrammed default
  1146                           ;	Low Voltage Programming Enable bit
  1147                           ;	LVP = 0x1, unprogrammed default
  1148  300007                     	org	3145735
  1149  300007  FF                 	db	255
  1150                           
  1151                           ;Config register CONFIG5L @ 0x300008
  1152                           ;	unspecified, using default values
  1153                           ;	UserNVM Program Memory Code Protection bit
  1154                           ;	CP = 0x1, unprogrammed default
  1155                           ;	DataNVM Memory Code Protection bit
  1156                           ;	CPD = 0x1, unprogrammed default
  1157  300008                     	org	3145736
  1158  300008  FF                 	db	255
  1159                           
  1160                           ;Config register CONFIG5H @ 0x300009
  1161                           ;	unspecified, using default values
  1162  300009                     	org	3145737
  1163  300009  FF                 	db	255
  1164                           
  1165                           ;Config register CONFIG6L @ 0x30000A
  1166                           ;	unspecified, using default values
  1167                           ;	Table Read Protection Block 0
  1168                           ;	EBTR0 = 0x1, unprogrammed default
  1169                           ;	Table Read Protection Block 1
  1170                           ;	EBTR1 = 0x1, unprogrammed default
  1171                           ;	Table Read Protection Block 2
  1172                           ;	EBTR2 = 0x1, unprogrammed default
  1173                           ;	Table Read Protection Block 3
  1174                           ;	EBTR3 = 0x1, unprogrammed default
  1175                           ;	Table Read Protection Block 4
  1176                           ;	EBTR4 = 0x1, unprogrammed default
  1177                           ;	Table Read Protection Block 5
  1178                           ;	EBTR5 = 0x1, unprogrammed default
  1179                           ;	Table Read Protection Block 6
  1180                           ;	EBTR6 = 0x1, unprogrammed default
  1181                           ;	Table Read Protection Block 7
  1182                           ;	EBTR7 = 0x1, unprogrammed default
  1183  30000A                     	org	3145738
  1184  30000A  FF                 	db	255
  1185                           
  1186                           ;Config register CONFIG6H @ 0x30000B
  1187                           ;	unspecified, using default values
  1188                           ;	Boot Block Table Read Protection bit
  1189                           ;	EBTRB = 0x1, unprogrammed default
  1190  30000B                     	org	3145739
  1191  30000B  FF                 	db	255
  1192                           tosu	equ	0xFFF
  1193                           tosh	equ	0xFFE
  1194                           tosl	equ	0xFFD
  1195                           stkptr	equ	0xFFC
  1196                           pclatu	equ	0xFFB
  1197                           pclath	equ	0xFFA
  1198                           pcl	equ	0xFF9
  1199                           tblptru	equ	0xFF8
  1200                           tblptrh	equ	0xFF7
  1201                           tblptrl	equ	0xFF6
  1202                           tablat	equ	0xFF5
  1203                           prodh	equ	0xFF4
  1204                           prodl	equ	0xFF3
  1205                           indf0	equ	0xFEF
  1206                           postinc0	equ	0xFEE
  1207                           postdec0	equ	0xFED
  1208                           preinc0	equ	0xFEC
  1209                           plusw0	equ	0xFEB
  1210                           fsr0h	equ	0xFEA
  1211                           fsr0l	equ	0xFE9
  1212                           wreg	equ	0xFE8
  1213                           indf1	equ	0xFE7
  1214                           postinc1	equ	0xFE6
  1215                           postdec1	equ	0xFE5
  1216                           preinc1	equ	0xFE4
  1217                           plusw1	equ	0xFE3
  1218                           fsr1h	equ	0xFE2
  1219                           fsr1l	equ	0xFE1
  1220                           bsr	equ	0xFE0
  1221                           indf2	equ	0xFDF
  1222                           postinc2	equ	0xFDE
  1223                           postdec2	equ	0xFDD
  1224                           preinc2	equ	0xFDC
  1225                           plusw2	equ	0xFDB
  1226                           fsr2h	equ	0xFDA
  1227                           fsr2l	equ	0xFD9
  1228                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         94
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95      6      40
    BANK0           160      0      60
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          234      0       0

Pointer List with Targets:

    sendStringSerial4@string	PTR unsigned char  size(2) Largest target is 3561
		 -> RAM(DATA[3561]), 


Critical Paths under _main in COMRAM

    _main->_LCD_Init
    _main->_sendStringSerial4
    _sendStringSerial4->_LCD_sendbyte
    _LCD_Init->_LCD_sendbyte
    _LCD_sendbyte->_LCD_sendnibble

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    2061
                         _ADC_getval
                           _ADC_init
                           _LCD_Init
                         _initUSART4
                    _sendCharSerial4
                  _sendStringSerial4
 ---------------------------------------------------------------------------------
 (1) _sendStringSerial4                                    4     2      2    1031
                                              4 COMRAM     2     0      2
                       _LCD_sendbyte
 ---------------------------------------------------------------------------------
 (1) _sendCharSerial4                                      1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _initUSART4                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             2     2      0     969
                                              4 COMRAM     2     2      0
                       _LCD_sendbyte
                     _LCD_sendnibble
 ---------------------------------------------------------------------------------
 (2) _LCD_sendbyte                                         3     2      1     909
                                              1 COMRAM     3     2      1
                     _LCD_sendnibble
 ---------------------------------------------------------------------------------
 (3) _LCD_sendnibble                                       1     1      0      60
                                              0 COMRAM     1     1      0
                          _LCD_E_TOG
 ---------------------------------------------------------------------------------
 (4) _LCD_E_TOG                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ADC_getval                                           4     2      2      46
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_getval
   _ADC_init
   _LCD_Init
     _LCD_sendbyte
       _LCD_sendnibble
         _LCD_E_TOG
     _LCD_sendnibble
   _initUSART4
   _sendCharSerial4
   _sendStringSerial4
     _LCD_sendbyte

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             DE9      0       0      33        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK13           EA      0       0      31        0.0%
BANK13              EA      0       0      32        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0      3C       5       37.5%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      6      28       1       42.1%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      64       8        0.0%
DATA                 0      0      64       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Wed Nov 17 11:20:55 2021

                        l30 FF16                          l32 FF2C                          l41 FEE8  
                        l34 FF42                          l27 FDC4                          l43 FEFE  
                        l36 FF58                          l38 FF66                          l46 FFFE  
                        l94 FE70                          u10 FF10                          u11 FF0C  
                        u20 FF26                          u21 FF22                          u30 FF3C  
                        u31 FF38                          u40 FF52                          u41 FF4E  
                        u80 FDD8                          u81 FDD4                         l201 FE36  
                       l203 FE44                         l204 FE62                         l136 FE14  
                       l145 FDC8                         l154 FEC8                         l148 FDDC  
                       l198 FDF6                         l900 FF52                         l902 FF5A  
                       l904 FF5E                         l940 FDF8                         l950 FE12  
                       l942 FE02                         l960 FDF4                         l952 FDDE  
                       l880 FDB8                         l944 FE04                         l954 FDE8  
                       l882 FDBA                         l890 FF18                         l946 FE0E  
                       l956 FDF0                         l884 FDC2                         l892 FF26  
                       l948 FE10                         l980 FDC8                         l958 FDF2  
                       l894 FF2E                         l886 FF02                         l982 FDD8  
                       l896 FF3C                         l888 FF10                         l898 FF44  
                       u210 FEE2                         u211 FEDE                         u220 FE44  
                       u221 FE40                         u230 FEC8                         u231 FEC4  
                       u307 FF8A                         u317 FFA0                         u327 FFB2  
                       u337 FFC4                         u347 FFD6                         u357 FFEC  
                       u367 FEF8                         u377 FF60                         u387 FDBC  
                       wreg 000FE8         __size_of_ADC_getval 0030                        l1100 FFA6  
                      l1110 FFD4                        l1102 FFB0                        l1120 FE4A  
                      l1112 FFDC                        l1104 FFB8                        l1122 FE5A  
                      l1114 FFE6                        l1106 FFC2                        l1130 FEAC  
                      l1116 FFF4                        l1108 FFCA                        l1132 FEB0  
                      l1118 FE34                        l1134 FEC8                        l1126 FE96  
                      l1128 FE9A                        l1090 FEF6                        l1084 FECC  
                      l1092 FF68                        l1180 FE7C                        l1086 FEE2  
                      l1094 FF80                        l1182 FE88                        l1174 FE64  
                      l1088 FEEA                        l1096 FF98                        l1176 FE68  
                      l1098 FF9E                        l1178 FE6C                _BAUD4CONbits 000EE9  
        __size_of_LCD_E_TOG 000E                        _data 0015                        _main FE64  
                      fsr2h 000FDA                        indf2 000FDF                        fsr2l 000FD9  
                      start 0000            __end_of_ADC_init FDF8                ___param_bank 000000  
          __end_of_LCD_Init 0000                       ?_main 0023                       _ADPCH 000F5F  
   __end_of_sendCharSerial4 FDDE               ?_LCD_sendbyte 0024                       status 000FD8  
   __size_of_LCD_sendnibble 0068             __initialization FE16                __end_of_main FE96  
         __end_of_LCD_E_TOG FDC6                      ??_main 0029               __activetblptr 000000  
                    _ADRESH 000F64              ??_LCD_sendbyte 0025                      _RC0PPS 000E62  
                    _RC4REG 000EE3                      _RX4PPS 000E15                      _TX4REG 000EE4  
              ??_ADC_getval 0025                      clear_0 FE1C                      clear_1 FE28  
                    isa$std 000001                   ?_ADC_init 0023            ?_sendCharSerial4 0023  
        __end_of_ADC_getval FE64                  __accesstop 0060     __end_of__initialization FE2E  
                 ?_LCD_Init 0023               ___rparam_used 000001              __pcstackCOMRAM 0023  
                ??_ADC_init 0023                  __pbssBANK0 0060                  ??_LCD_Init 0027  
            _LCD_sendnibble FF00        __end_of_LCD_sendbyte FF00                     _SP4BRGH 000EE6  
                   _SP4BRGL 000EE5      __end_of_LCD_sendnibble FF68                   _ADREFbits 000F58  
                _initUSART4 FDF8                     __Hparam 0000                     __Lparam 0000  
   sendStringSerial4@string 0027                     __pcinit FE16                     __ramtop 0E00  
                   __ptext0 FE64                     __ptext1 FE96                     __ptext2 FDC6  
                   __ptext3 FDF8                     __ptext4 FF68                     __ptext5 FECA  
                   __ptext6 FF00                     __ptext7 FDB8                     __ptext8 FDDE  
                   __ptext9 FE34                   _LCD_E_TOG FDB8                     _lowbits 001B  
             _RxBufWriteCnt 0022        end_of_initialization FE2E             ?_LCD_sendnibble 0023  
          ADC_getval@tmpval 0025        LCD_sendbyte@highbits 0025                     postinc0 000FEE  
                ?_LCD_E_TOG 0023                   _TRISAbits 000F81                   _TRISBbits 000F82  
                 _TRISCbits 000F83                   _TRISEbits 000F85           __size_of_ADC_init 001A  
              _EUSART4RXbuf 0001                _EUSART4TXbuf 0060                 ?_initUSART4 0023  
 sendCharSerial4@charToSend 0023           __size_of_LCD_Init 0098       __size_of_LCD_sendbyte 0036  
      LCD_sendnibble@number 0023         start_initialization FE16               _TxBufWriteCnt 0020  
              _LCD_sendbyte FECA    __size_of_sendCharSerial4 0018                 __pbssCOMRAM 0001  
               ??_LCD_E_TOG 0023         __size_of_initUSART4 001E                   _frac_part 0017  
          ??_LCD_sendnibble 0023                _RxBufReadCnt 0021                    _ADC_init FDDE  
          LCD_sendbyte@Byte 0026           _sendStringSerial4 FE96                    _LCD_Init FF68  
          LCD_sendbyte@type 0024                    _LATBbits 000F7A                    _LATCbits 000F7B  
                  _LATEbits 000F7D          ?_sendStringSerial4 0027                    _PIE4bits 000E2D  
                  _PIR4bits 000E37           ??_sendCharSerial4 0023         ??_sendStringSerial4 0029  
                _ADCON0bits 000F60                _TxBufReadCnt 001F   __end_of_sendStringSerial4 FECA  
              ??_initUSART4 0023                    __Hrparam 0000                  _ADC_getval FE34  
                  __Lrparam 0000                  _ANSELAbits 000E92          __end_of_initUSART4 FE16  
                  _highbits 001D               __size_of_main 0032                    _int_part 0019  
                  isa$xinst 000000                  _RC4STAbits 000EE7  __size_of_sendStringSerial4 0034  
               ?_ADC_getval 0023                  _TX4STAbits 000EE8             _sendCharSerial4 FDC6  
